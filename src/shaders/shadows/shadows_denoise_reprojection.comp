#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#define RAY_MASK_SIZE_X 8
#define RAY_MASK_SIZE_Y 4
#define NORMAL_DISTANCE 0.1f
#define PLANE_DISTANCE 5.0f

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, rg16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D i_Moments;

// Current G-buffer DS
layout(set = 1, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 1, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 1, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 1, binding = 3) uniform sampler2D s_GBufferDepth;

// Previous G-Buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_PrevGBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_PrevGBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_PrevGBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_PrevGBufferDepth;

// Input DS
layout(set = 3, binding = 0) uniform usampler2D s_Input;

// Prev Output
layout(set = 4, binding = 0) uniform sampler2D s_HistoryOutput;
layout(set = 4, binding = 1) uniform sampler2D s_HistoryMoments;

layout(set = 5, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
u_GlobalUBO;

layout(set = 6, binding = 0, std430) buffer DenoiseTileData_t
{
    ivec2 coord[];
}
DenoiseTileData;
layout(set = 6, binding = 1, std430) buffer DenoiseTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
DenoiseTileDispatchArgs;
layout(set = 6, binding = 2, std430) buffer ShadowTileData_t
{
    ivec2 coord[];
}
ShadowTileData;
layout(set = 6, binding = 3, std430) buffer ShadowTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
ShadowTileDispatchArgs;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    float alpha;
    float moments_alpha;
    int   g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------
// SHARED -----------------------------------------------------------
// ------------------------------------------------------------------

shared uint  g_shadow_hit_masks[3][6];
shared float g_mean_accumulation[8][24];
shared uint  g_should_denoise;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

void populate_cache()
{
    if (gl_LocalInvocationID.x < 3 && gl_LocalInvocationID.y < 6)
    {
        ivec2 coord                                                        = ivec2(gl_WorkGroupID.x, gl_WorkGroupID.y * 2) - ivec2(1, 2) + ivec2(gl_LocalInvocationID.xy);
        g_shadow_hit_masks[gl_LocalInvocationID.x][gl_LocalInvocationID.y] = texelFetch(s_Input, coord, 0).x;
    }

    barrier();
}

// ------------------------------------------------------------------------

float unpack_shadow_hit_value(ivec2 coord)
{
    // Find the global coordinate for the top left corner of the current work group.
    const ivec2 work_group_start_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y);

    // Find the global coordinate for the top left corner of the cache.
    const ivec2 cache_start_coord = work_group_start_coord - ivec2(RAY_MASK_SIZE_X, RAY_MASK_SIZE_Y * 2);

    // Compute the local coordinate within the cache for the requested global coordinate.
    const ivec2 unpacked_cache_coord = coord - cache_start_coord;

    // From the unpacked local coordinate, compute which ray mask the requested hit belongs to.
    // aka the packed local coordinate.
    const ivec2 packed_cache_coord = unpacked_cache_coord / ivec2(RAY_MASK_SIZE_X, RAY_MASK_SIZE_Y);

    // From the packed local coordinate, compute the unpacked local coordinate for the start of the current ray mask.
    const ivec2 mask_start_coord = packed_cache_coord * ivec2(RAY_MASK_SIZE_X, RAY_MASK_SIZE_Y);

    // Find the relative coordinate of the requested sample within the ray mask.
    const ivec2 relative_mask_coord = unpacked_cache_coord - mask_start_coord;

    // Compute the flattened hit index of the requested sample within the ray mask.
    const int hit_index = relative_mask_coord.y * RAY_MASK_SIZE_X + relative_mask_coord.x;

    // Use the hit index to bit shift the value from the cache and retrieve the requested sample.
    return float((g_shadow_hit_masks[packed_cache_coord.x][packed_cache_coord.y] >> hit_index) & 1u);
}

// ------------------------------------------------------------------------

bool plane_distance_disocclusion_check(vec3 current_pos, vec3 history_pos, vec3 current_normal)
{
    vec3  to_current    = current_pos - history_pos;
    float dist_to_plane = abs(dot(to_current, current_normal));

    return dist_to_plane > PLANE_DISTANCE;
}

// ------------------------------------------------------------------------

bool out_of_frame_disocclusion_check(ivec2 coord)
{
    const ivec2 imageDim = textureSize(s_HistoryOutput, 0);

    // check whether reprojected pixel is inside of the screen
    if (any(lessThan(coord, ivec2(0, 0))) || any(greaterThan(coord, imageDim - ivec2(1, 1))))
        return true;
    else
        return false;
}

// ------------------------------------------------------------------------

bool mesh_id_disocclusion_check(float mesh_id, float mesh_id_prev)
{
    if (mesh_id == mesh_id_prev)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool normals_disocclusion_check(vec3 current_normal, vec3 history_normal)
{
    if (pow(abs(dot(current_normal, history_normal)), 2) > NORMAL_DISTANCE)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool is_reprojection_valid(ivec2 coord, vec3 current_pos, vec3 history_pos, vec3 current_normal, vec3 history_normal, float current_mesh_id, float history_mesh_id)
{
    // check if the history sample is within the frame
    if (out_of_frame_disocclusion_check(coord)) return false;

    // check if the history belongs to the same surface
    if (mesh_id_disocclusion_check(current_mesh_id, history_mesh_id)) return false;

    // check if history sample is on the same plane
    if (plane_distance_disocclusion_check(current_pos, history_pos, current_normal)) return false;

    // check normals for compatibility
    if (normals_disocclusion_check(current_normal, history_normal)) return false;

    return true;
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------

float horizontal_neighborhood_mean(ivec2 coord)
{
    float result = 0.0f;

    for (int x = -8; x <= 8; x++)
        result += unpack_shadow_hit_value(ivec2(coord.x + x, coord.y));

    return result;
}

// ------------------------------------------------------------------

float neighborhood_mean(ivec2 coord)
{
    float top    = horizontal_neighborhood_mean(ivec2(coord.x, coord.y - 8));
    float middle = horizontal_neighborhood_mean(ivec2(coord.x, coord.y));
    float bottom = horizontal_neighborhood_mean(ivec2(coord.x, coord.y + 8));

    g_mean_accumulation[gl_LocalInvocationID.x][gl_LocalInvocationID.y]      = top;
    g_mean_accumulation[gl_LocalInvocationID.x][gl_LocalInvocationID.y + 8]  = middle;
    g_mean_accumulation[gl_LocalInvocationID.x][gl_LocalInvocationID.y + 16] = bottom;

    barrier();

    const int   radius = 8;
    const float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);

    float mean = 0.0f;

    for (int y = 0; y <= 16; y++)
        mean += g_mean_accumulation[gl_LocalInvocationID.x][gl_LocalInvocationID.y + y];

    return mean / weight;
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = u_GlobalUBO.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------

bool load_prev_data(ivec2 frag_coord, float depth, out float history_visibility, out vec2 history_moments, out float history_length)
{
    const ivec2 ipos         = frag_coord;
    const vec2  imageDim     = vec2(textureSize(s_HistoryOutput, 0));
    const vec2  pixel_center = vec2(frag_coord) + vec2(0.5);
    const vec2  tex_coord    = pixel_center / vec2(imageDim);

    vec4 center_g_buffer_2 = texelFetch(s_GBuffer2, ipos, u_PushConstants.g_buffer_mip);
    vec4 center_g_buffer_3 = texelFetch(s_GBuffer3, ipos, u_PushConstants.g_buffer_mip);

    vec3  current_normal  = octohedral_to_direction(center_g_buffer_2.xy);
    vec2  current_motion  = center_g_buffer_2.zw;
    float current_mesh_id = center_g_buffer_3.z;
    vec3  current_pos     = world_position_from_depth(tex_coord, depth);

    // +0.5 to account for texel center offset
    const ivec2 ipos_prev = ivec2(vec2(ipos) + current_motion.xy * imageDim + vec2(0.5, 0.5));

    history_visibility = 0.0f;
    history_moments    = vec2(0.0f);

    bool       v[4];
    const vec2 pos_prev          = floor(frag_coord.xy) + current_motion.xy * imageDim;
    const vec2 history_tex_coord = tex_coord + current_motion.xy;
    ivec2      offset[4]         = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

    // check for all 4 taps of the bilinear filter for validity
    bool valid = false;
    for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
    {
        ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

        vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, loc, u_PushConstants.g_buffer_mip);
        vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, loc, u_PushConstants.g_buffer_mip);
        float sample_depth      = texelFetch(s_PrevGBufferDepth, loc, u_PushConstants.g_buffer_mip).r;

        vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
        float history_mesh_id = sample_g_buffer_3.z;
        vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

        v[sampleIdx] = is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id);

        valid = valid || v[sampleIdx];
    }

    if (valid)
    {
        float sumw = 0;
        float x    = fract(pos_prev.x);
        float y    = fract(pos_prev.y);

        // bilinear weights
        float w[4] = { (1 - x) * (1 - y),
                       x * (1 - y),
                       (1 - x) * y,
                       x * y };

        history_visibility = 0.0f;
        history_moments    = vec2(0.0f);

        // perform the actual bilinear interpolation
        for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
        {
            ivec2 loc = ivec2(pos_prev) + offset[sampleIdx];

            if (v[sampleIdx])
            {
                history_visibility += w[sampleIdx] * texelFetch(s_HistoryOutput, loc, 0).r;
                history_moments += w[sampleIdx] * texelFetch(s_HistoryMoments, loc, 0).rg;
                sumw += w[sampleIdx];
            }
        }

        // redistribute weights in case not all taps were used
        valid              = (sumw >= 0.01);
        history_visibility = valid ? history_visibility / sumw : 0.0f;
        history_moments    = valid ? history_moments / sumw : vec2(0.0f);
    }
    if (!valid) // perform cross-bilateral filter in the hope to find some suitable samples somewhere
    {
        float cnt = 0.0;

        // this code performs a binary descision for each tap of the cross-bilateral filter
        const int radius = 1;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                ivec2 p = ipos_prev + ivec2(xx, yy);

                vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, p, u_PushConstants.g_buffer_mip);
                vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, p, u_PushConstants.g_buffer_mip);
                float sample_depth      = texelFetch(s_PrevGBufferDepth, p, u_PushConstants.g_buffer_mip).r;

                vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
                float history_mesh_id = sample_g_buffer_3.z;
                vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

                if (is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id))
                {
                    history_visibility += texelFetch(s_HistoryOutput, p, 0).r;
                    history_moments += texelFetch(s_HistoryMoments, p, 0).rg;
                    cnt += 1.0;
                }
            }
        }
        if (cnt > 0)
        {
            valid = true;
            history_visibility /= cnt;
            history_moments /= cnt;
        }
    }

    if (valid)
        history_length = texelFetch(s_HistoryMoments, ipos_prev, 0).b;
    else
    {
        history_visibility = 0.0f;
        history_moments    = vec2(0.0f);
        history_length     = 0.0f;
    }

    return valid;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    g_should_denoise = 0;

    barrier();

    const ivec2 size          = textureSize(s_HistoryOutput, 0);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);

    populate_cache();
    float mean = neighborhood_mean(current_coord);

    float depth = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;

    float visibility                 = 0.0f;
    vec2  output_visibility_variance = vec2(0.0f);
    vec2  output_moments             = vec2(0.0f);
    float history_length             = 0.0f;

    if (depth != 1.0f)
    {
        visibility = unpack_shadow_hit_value(current_coord);

        float history_visibility;
        vec2  history_moments;
        bool  success  = load_prev_data(current_coord,
                                      depth,
                                      history_visibility,
                                      history_moments,
                                      history_length);
        history_length = min(32.0f, success ? history_length + 1.0f : 1.0f);

        if (success)
        {
            float spatial_variance = mean;
            spatial_variance       = max(spatial_variance - mean * mean, 0.0f);

            // Compute the clamping bounding box
            const float std_deviation = sqrt(spatial_variance);
            const float nmin          = mean - 0.5f * std_deviation;
            const float nmax          = mean + 0.5f * std_deviation;

            history_visibility = clamp(history_visibility, nmin, nmax);
        }

        // this adjusts the alpha for the case where insufficient history is available.
        // It boosts the temporal accumulation to give the samples equal weights in
        // the beginning.
        const float alpha         = success ? max(u_PushConstants.alpha, 1.0 / history_length) : 1.0;
        const float alpha_moments = success ? max(u_PushConstants.moments_alpha, 1.0 / history_length) : 1.0;

        // compute first two moments of luminance
        output_moments.r = visibility;
        output_moments.g = output_moments.r * output_moments.r;

        // temporal integration of the moments
        output_moments = mix(history_moments, output_moments, alpha_moments);

        output_visibility_variance.y = max(0.0f, output_moments.g - output_moments.r * output_moments.r);

        output_visibility_variance.x = mix(history_visibility, visibility, alpha);
    }

    // Temporal integration
    imageStore(i_Moments, current_coord, vec4(output_moments, history_length, 0.0f));
    imageStore(i_Output, current_coord, vec4(output_visibility_variance, 0.0f, 0.0f));

    // If all the threads are in shadow, skip the A-Trous filter.
    if (depth != 1.0f && output_visibility_variance.x > 0.0f)
        g_should_denoise = 1;

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        if (g_should_denoise == 1)
        {
            uint idx                   = atomicAdd(DenoiseTileDispatchArgs.num_groups_x, 1);
            DenoiseTileData.coord[idx] = current_coord;
        }
        else
        {
            uint idx                  = atomicAdd(ShadowTileDispatchArgs.num_groups_x, 1);
            ShadowTileData.coord[idx] = current_coord;
        }
    }
}

// ------------------------------------------------------------------