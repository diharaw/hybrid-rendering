#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "../common.glsl"
#include "../scene_descriptor_set.glsl"
#include "gi_common.glsl"

// ------------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------------
// ------------------------------------------------------------------------

layout(set = 1, binding = 0, rgba16f) uniform image2D i_Radiance;
layout(set = 1, binding = 1, rgba16f) uniform image2D i_DirectionDistance;

layout(set = 2, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
ubo;

layout(set = 4, binding = 2, scalar) uniform DDGIUBO
{
    DDGIUniforms ddgi;
};

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    mat4  random_orientation;
    uint  num_frames;
    uint  infinite_bounces;
    float gi_intensity;
}
u_PushConstants;

// ------------------------------------------------------------------------
// PAYLOADS ---------------------------------------------------------------
// ------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT GIPayload p_Payload;

// ------------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------------
// ------------------------------------------------------------------------

vec3 spherical_fibonacci(float i, float n)
{
    const float PHI = sqrt(5) * 0.5 + 0.5;
#define madfrac(A, B) ((A) * (B)-floor((A) * (B)))
    float phi       = 2.0 * M_PI * madfrac(i, PHI - 1);
    float cos_theta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sin_theta = sqrt(clamp(1.0 - cos_theta * cos_theta, 0.0f, 1.0f));

    return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);

#undef madfrac
}

// ------------------------------------------------------------------------
// MAIN -------------------------------------------------------------------
// ------------------------------------------------------------------------

void main()
{
    const ivec2 pixel_coord = ivec2(gl_LaunchIDEXT.xy);
    const int   probe_id    = pixel_coord.y;
    const int   ray_id      = pixel_coord.x;

    uint  ray_flags  = gl_RayFlagsOpaqueEXT;
    uint  cull_mask  = 0xff;
    float tmin       = 0.001;
    float tmax       = 10000.0;
    vec3  ray_origin = probe_location(ddgi, probe_id);
    vec3  direction  = normalize(mat3(u_PushConstants.random_orientation) * spherical_fibonacci(ray_id, ddgi.rays_per_probe));

    p_Payload.rng          = rng_init(pixel_coord, u_PushConstants.num_frames);
    p_Payload.L            = vec3(0.0f);
    p_Payload.T            = vec3(1.0f);
    p_Payload.hit_distance = tmax;

    traceRayEXT(u_TopLevelAS, ray_flags, cull_mask, 0, 0, 0, ray_origin, tmin, direction, tmax, 0);

    imageStore(i_Radiance, pixel_coord, vec4(p_Payload.L, 0.0f));
    imageStore(i_DirectionDistance, pixel_coord, vec4(direction, p_Payload.hit_distance));
}

// ------------------------------------------------------------------------