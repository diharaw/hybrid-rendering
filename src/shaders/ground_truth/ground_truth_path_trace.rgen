#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "../common.glsl"
#include "../scene_descriptor_set.glsl"

// ------------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------------
// ------------------------------------------------------------------------

layout(set = 1, binding = 0, rgba16f) uniform image2D i_CurrentColor;
layout(set = 2, binding = 0, rgba16f) uniform image2D i_PreviousColor;

layout(set = 3, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
ubo;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    uint num_frames;
    uint max_ray_bounces;
}
u_PushConstants;

// ------------------------------------------------------------------------
// PAYLOADS ---------------------------------------------------------------
// ------------------------------------------------------------------------

layout(location = 0) rayPayloadEXT PathTracePayload p_Payload;

// ------------------------------------------------------------------------
// MAIN -------------------------------------------------------------------
// ------------------------------------------------------------------------

void main()
{
    const uvec2 launch_id   = uvec2(gl_LaunchIDEXT.xy);
    const uvec2 launch_size = uvec2(gl_LaunchSizeEXT.xy);

    // Init Payload
    p_Payload.L     = vec3(0.0f);
    p_Payload.T     = vec3(1.0);
    p_Payload.depth = 0;
    p_Payload.rng   = rng_init(launch_id, u_PushConstants.num_frames);

    // Compute Pixel Coordinates
    const vec2 pixel_coord = vec2(launch_id) + vec2(0.5);

    const vec2 jittered_coord = pixel_coord + vec2(next_float(p_Payload.rng), next_float(p_Payload.rng));
    const vec2 tex_coord      = jittered_coord / vec2(launch_size);

    vec2 tex_coord_neg_to_pos = tex_coord * 2.0 - 1.0;

    // Compute Ray Origin and Direction
    vec4 origin    = ubo.view_inverse * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target    = ubo.proj_inverse * vec4(tex_coord_neg_to_pos.x, tex_coord_neg_to_pos.y, 1.0, 1.0);
    vec4 direction = ubo.view_inverse * vec4(normalize(target.xyz), 0.0);

    uint  ray_flags = 0;
    uint  cull_mask = 0xFF;
    float tmin      = 0.001;
    float tmax      = 10000.0;

    // Trace Ray
    traceRayEXT(u_TopLevelAS,
                ray_flags,
                cull_mask,
                0,
                0,
                0,
                origin.xyz,
                tmin,
                direction.xyz,
                tmax,
                0);

    // Blend current frames' result with the previous frame
    vec3 clamped_color = min(p_Payload.L, RADIANCE_CLAMP_COLOR);

    if (u_PushConstants.num_frames == 0)
    {
        vec3 final_color = clamped_color;
        imageStore(i_CurrentColor, ivec2(launch_id), vec4(final_color, 1.0));
    }
    else
    {
        vec3 prev_color = imageLoad(i_PreviousColor, ivec2(launch_id)).rgb;

        vec3 accumulated_color = prev_color + (clamped_color - prev_color) / float(u_PushConstants.num_frames);

        vec3 final_color = accumulated_color;

        imageStore(i_CurrentColor, ivec2(launch_id), vec4(final_color, 1.0));
    }
}

// ------------------------------------------------------------------------
