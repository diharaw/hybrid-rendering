#version 450

#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#define NORMAL_DISTANCE 0.1f
#define PLANE_DISTANCE 5.0f

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D i_Moments;

// Current G-buffer DS
layout(set = 1, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 1, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 1, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 1, binding = 3) uniform sampler2D s_GBufferDepth;

// Previous G-Buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_PrevGBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_PrevGBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_PrevGBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_PrevGBufferDepth;

// Input DS
layout(set = 3, binding = 0) uniform sampler2D s_Input;

// Prev Output
layout(set = 4, binding = 0) uniform sampler2D s_HistoryOutput;
layout(set = 4, binding = 1) uniform sampler2D s_HistoryMoments;

// Per Frame UBO
layout(set = 5, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
u_GlobalUBO;

layout(set = 6, binding = 0, std430) buffer DenoiseTileData_t
{
    ivec2 coord[];
}
DenoiseTileData;
layout(set = 6, binding = 1, std430) buffer DenoiseTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
DenoiseTileDispatchArgs;
layout(set = 6, binding = 2, std430) buffer CopyTileData_t
{
    ivec2 coord[];
}
CopyTileData;
layout(set = 6, binding = 3, std430) buffer CopyTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
CopyTileDispatchArgs;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    vec3  camera_delta;
    float frame_time;
    float alpha;
    float moments_alpha;
    int   g_buffer_mip;
    int   approximate_with_ddgi;
}
u_PushConstants;

shared uint g_should_denoise;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

bool plane_distance_disocclusion_check(vec3 current_pos, vec3 history_pos, vec3 current_normal)
{
    vec3  to_current    = current_pos - history_pos;
    float dist_to_plane = abs(dot(to_current, current_normal));

    return dist_to_plane > PLANE_DISTANCE;
}

// ------------------------------------------------------------------------

bool out_of_frame_disocclusion_check(ivec2 coord)
{
    const ivec2 imageDim = textureSize(s_HistoryOutput, 0);

    // check whether reprojected pixel is inside of the screen
    if (any(lessThan(coord, ivec2(0, 0))) || any(greaterThan(coord, imageDim - ivec2(1, 1))))
        return true;
    else
        return false;
}

// ------------------------------------------------------------------------

bool mesh_id_disocclusion_check(float mesh_id, float mesh_id_prev)
{
    if (mesh_id == mesh_id_prev)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool normals_disocclusion_check(vec3 current_normal, vec3 history_normal)
{
    if (pow(abs(dot(current_normal, history_normal)), 2) > NORMAL_DISTANCE)
        return false;
    else
        return true;
}

// ------------------------------------------------------------------------

bool is_reprojection_valid(ivec2 coord, vec3 current_pos, vec3 history_pos, vec3 current_normal, vec3 history_normal, float current_mesh_id, float history_mesh_id, float depth)
{
    // check if the history sample is within the frame
    if (out_of_frame_disocclusion_check(coord)) return false;

    // check if the history belongs to the same surface
    if (mesh_id_disocclusion_check(current_mesh_id, history_mesh_id)) return false;

    // check if history sample is on the same plane
    if (plane_distance_disocclusion_check(current_pos, history_pos, current_normal)) return false;

    // check normals for compatibility
    if (normals_disocclusion_check(current_normal, history_normal)) return false;

    // check if sample belongs to the skybox
    if (depth == -1) return false;

    return true;
}

// ------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------------

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth)
{
    // Take texture coordinate and remap to [-1.0, 1.0] range.
    vec2 screen_pos = tex_coords * 2.0 - 1.0;

    // // Create NDC position.
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);

    // Transform back into world position.
    vec4 world_pos = u_GlobalUBO.view_proj_inverse * ndc_pos;

    // Undo projection.
    world_pos = world_pos / world_pos.w;

    return world_pos.xyz;
}

// ------------------------------------------------------------------

vec2 surface_point_reprojection(ivec2 coord, vec2 motion_vector, ivec2 size)
{
    return vec2(coord) + motion_vector.xy * vec2(size);
}

// ------------------------------------------------------------------

vec2 virtual_point_reprojection(ivec2 current_coord, ivec2 size, float depth, float ray_length)
{
    const vec2 tex_coord  = current_coord / vec2(size);
    vec3       ray_origin = world_position_from_depth(tex_coord, depth);

    vec3 camera_ray = ray_origin - u_GlobalUBO.cam_pos.xyz;

    float camera_ray_length     = length(camera_ray);
    float reflection_ray_length = ray_length;

    camera_ray = normalize(camera_ray);

    vec3 parallax_hit_point = u_GlobalUBO.cam_pos.xyz + camera_ray * (camera_ray_length + reflection_ray_length);

    vec4 reprojected_parallax_hit_point = u_GlobalUBO.prev_view_proj * vec4(parallax_hit_point, 1.0f);

    reprojected_parallax_hit_point.xy /= reprojected_parallax_hit_point.w;

    return (reprojected_parallax_hit_point.xy * 0.5f + 0.5f) * vec2(size);
}

// ------------------------------------------------------------------------

vec2 compute_history_coord(ivec2 current_coord, ivec2 size, float depth, vec2 motion, float curvature, float ray_length)
{
    const vec2 surface_history_coord = surface_point_reprojection(current_coord, motion, size);

    vec2 history_coord = surface_history_coord;

    if (ray_length > 0.0f && curvature == 0.0f)
        history_coord = virtual_point_reprojection(current_coord, size, depth, ray_length);

    return history_coord;
}

// ------------------------------------------------------------------

float luminance(vec3 rgb)
{
    return dot(rgb, vec3(0.2126f, 0.7152f, 0.0722f));
}

// ------------------------------------------------------------------

vec3 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec3 history_sample)
{
    // Note: only clips towards aabb center
    vec3 aabb_center = 0.5f * (aabb_max + aabb_min);
    vec3 extent_clip = 0.5f * (aabb_max - aabb_min) + 0.001f;

    // Find color vector
    vec3 color_vector = history_sample - aabb_center;
    // Transform into clip space
    vec3 color_vector_clip = color_vector / extent_clip;
    // Find max absolute component
    color_vector_clip  = abs(color_vector_clip);
    float max_abs_unit = max(max(color_vector_clip.x, color_vector_clip.y), color_vector_clip.z);

    if (max_abs_unit > 1.0)
        return aabb_center + color_vector / max_abs_unit; // clip towards color vector
    else
        return history_sample; // point is inside aabb
}

// ------------------------------------------------------------------

void neighborhood_standard_deviation(ivec2 coord, out vec3 mean, out vec3 std_dev)
{
    vec3 m1 = vec3(0.0f);
    vec3 m2 = vec3(0.0f);

    int   radius = 8;
    float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);

    for (int dx = -radius; dx <= radius; dx++)
    {
        for (int dy = -radius; dy <= radius; dy++)
        {
            ivec2 sample_coord = coord + ivec2(dx, dy);
            vec3  sample_color = texelFetch(s_Input, sample_coord, 0).rgb;

            m1 += sample_color;
            m2 += sample_color * sample_color;
        }
    }

    mean          = m1 / weight;
    vec3 variance = (m2 / weight) - (mean * mean);

    std_dev = sqrt(max(variance, 0.0f));
}

// ------------------------------------------------------------------

bool load_prev_data(ivec2 frag_coord, vec2 history_coord, vec2 history_tex_coord, float depth, vec4 center_g_buffer_2, vec4 center_g_buffer_3, out vec3 history_color, out vec2 history_moments, out float history_length)
{
    const ivec2 ipos         = frag_coord;
    const vec2  imageDim     = vec2(textureSize(s_HistoryOutput, 0));
    const vec2  pixel_center = vec2(frag_coord) + vec2(0.5);
    const vec2  tex_coord    = pixel_center / vec2(imageDim);

    vec3  current_normal  = octohedral_to_direction(center_g_buffer_2.xy);
    float current_mesh_id = center_g_buffer_3.z;
    vec3  current_pos     = world_position_from_depth(tex_coord, depth);

    // +0.5 to account for texel center offset
    const ivec2 ipos_prev = ivec2(history_coord + vec2(0.5, 0.5));

    history_color   = vec3(0.0f);
    history_moments = vec2(0.0f);

    bool       v[4];
    const vec2 posPrev   = history_coord;
    ivec2      offset[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

    // check for all 4 taps of the bilinear filter for validity
    bool valid = false;
    for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
    {
        ivec2 loc = ivec2(posPrev) + offset[sampleIdx];

        vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, loc, u_PushConstants.g_buffer_mip);
        vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, loc, u_PushConstants.g_buffer_mip);
        float sample_depth      = texelFetch(s_PrevGBufferDepth, loc, u_PushConstants.g_buffer_mip).r;

        vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
        float history_mesh_id = sample_g_buffer_3.z;
        vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

        v[sampleIdx] = is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id, sample_depth);

        valid = valid || v[sampleIdx];
    }

    if (valid)
    {
        float sumw = 0;
        float x    = fract(posPrev.x);
        float y    = fract(posPrev.y);

        // bilinear weights
        float w[4] = { (1 - x) * (1 - y),
                       x * (1 - y),
                       (1 - x) * y,
                       x * y };

        history_color   = vec3(0.0f);
        history_moments = vec2(0.0f);

        // perform the actual bilinear interpolation
        for (int sampleIdx = 0; sampleIdx < 4; sampleIdx++)
        {
            ivec2 loc = ivec2(posPrev) + offset[sampleIdx];

            if (v[sampleIdx])
            {
                history_color += w[sampleIdx] * texelFetch(s_HistoryOutput, loc, 0).rgb;
                history_moments += w[sampleIdx] * texelFetch(s_HistoryMoments, loc, 0).rg;
                sumw += w[sampleIdx];
            }
        }

        // redistribute weights in case not all taps were used
        valid           = (sumw >= 0.01);
        history_color   = valid ? history_color / sumw : vec3(0.0f);
        history_moments = valid ? history_moments / sumw : vec2(0.0f);
    }
    if (!valid) // perform cross-bilateral filter in the hope to find some suitable samples somewhere
    {
        float cnt = 0.0;

        // this code performs a binary descision for each tap of the cross-bilateral filter
        const int radius = 1;
        for (int yy = -radius; yy <= radius; yy++)
        {
            for (int xx = -radius; xx <= radius; xx++)
            {
                ivec2 p = ipos_prev + ivec2(xx, yy);

                vec4  sample_g_buffer_2 = texelFetch(s_PrevGBuffer2, p, u_PushConstants.g_buffer_mip);
                vec4  sample_g_buffer_3 = texelFetch(s_PrevGBuffer3, p, u_PushConstants.g_buffer_mip);
                float sample_depth      = texelFetch(s_PrevGBufferDepth, p, u_PushConstants.g_buffer_mip).r;

                vec3  history_normal  = octohedral_to_direction(sample_g_buffer_2.xy);
                float history_mesh_id = sample_g_buffer_3.z;
                vec3  history_pos     = world_position_from_depth(history_tex_coord, sample_depth);

                if (is_reprojection_valid(ipos_prev, current_pos, history_pos, current_normal, history_normal, current_mesh_id, history_mesh_id, sample_depth))
                {
                    history_color += texelFetch(s_HistoryOutput, p, 0).rgb;
                    history_moments += texelFetch(s_HistoryMoments, p, 0).rg;
                    cnt += 1.0;
                }
            }
        }
        if (cnt > 0)
        {
            valid = true;
            history_color /= cnt;
            history_moments /= cnt;
        }
    }

    if (valid)
        history_length = texelFetch(s_HistoryMoments, ipos_prev, 0).b;
    else
    {
        history_color   = vec3(0.0f);
        history_moments = vec2(0.0f);
        history_length  = 0.0f;
    }

    return valid;
}

// ------------------------------------------------------------------

// TODO: Implement proper accumulation speed adjustment
float compute_max_accumulated_frame(float history_length)
{
    if (length(u_PushConstants.camera_delta) > 0.0f)
        return 8.0f;
    else
        return history_length;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    g_should_denoise = 0;

    barrier();

    const ivec2 size          = textureSize(s_HistoryOutput, 0);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    const float depth     = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;
    const float roughness = texelFetch(s_GBuffer3, current_coord, u_PushConstants.g_buffer_mip).r;

    vec4 output_radiance = vec4(0.0f);
    vec4 output_moments  = vec4(0.0f);

    if (depth != 1.0f)
    {
        vec4        color_ray_length = texelFetch(s_Input, current_coord, 0);
        vec3        color            = color_ray_length.rgb;
        const float ray_length       = color_ray_length.a;

        const vec4 center_g_buffer_2 = texelFetch(s_GBuffer2, current_coord, u_PushConstants.g_buffer_mip);
        const vec4 center_g_buffer_3 = texelFetch(s_GBuffer3, current_coord, u_PushConstants.g_buffer_mip);

        const vec2 history_tex_coord = tex_coord + center_g_buffer_2.zw;
        const vec2 history_coord     = compute_history_coord(current_coord, size, depth, center_g_buffer_2.zw, center_g_buffer_3.g, ray_length);

        float history_length;
        vec3  history_color;
        vec2  history_moments;
        bool  success = load_prev_data(current_coord,
                                      history_coord,
                                      history_tex_coord,
                                      depth,
                                      center_g_buffer_2,
                                      center_g_buffer_3,
                                      history_color,
                                      history_moments,
                                      history_length);

        history_length = min(32.0f, success ? history_length + 1.0f : 1.0f);

        if (success)
        {
            vec3 std_dev;
            vec3 mean;

            neighborhood_standard_deviation(ivec2(gl_GlobalInvocationID.xy), mean, std_dev);

            vec3 radiance_min = mean - std_dev;
            vec3 radiance_max = mean + std_dev;

            history_color.xyz = clip_aabb(radiance_min, radiance_max, history_color.xyz);
        }

        // this adjusts the alpha for the case where insufficient history is available.
        // It boosts the temporal accumulation to give the samples equal weights in
        // the beginning.

        const float max_accumulated_frame = compute_max_accumulated_frame(history_length);
        const float alpha                 = success ? max(u_PushConstants.alpha, 1.0 / max_accumulated_frame) : 1.0;
        const float alpha_moments         = success ? max(u_PushConstants.moments_alpha, 1.0 / max_accumulated_frame) : 1.0;

        // compute first two moments of luminance
        vec2 moments = vec2(0.0f);
        moments.r    = luminance(color);
        moments.g    = moments.r * moments.r;

        // temporal integration of the moments
        moments = mix(history_moments, moments, alpha_moments);

        float variance = max(0.0f, moments.g - moments.r * moments.r);

        // temporal integration of radiance
        vec3 accumulated_color = mix(history_color, color, alpha);

        output_moments  = vec4(moments, history_length, 0.0f);
        output_radiance = vec4(accumulated_color, variance);
    }

    imageStore(i_Moments, ivec2(gl_GlobalInvocationID.xy), output_moments);
    imageStore(i_Output, ivec2(gl_GlobalInvocationID.xy), output_radiance);

    // If all the threads are in within the roughness range, skip the A-Trous filter.
    if (depth != 1.0f && roughness >= MIRROR_REFLECTIONS_ROUGHNESS_THRESHOLD)
    {
        if (u_PushConstants.approximate_with_ddgi == 1)
        {
            if (roughness <= DDGI_REFLECTIONS_ROUGHNESS_THRESHOLD)
                g_should_denoise = 1;
        }
        else 
            g_should_denoise = 1;
    }                    

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        if (g_should_denoise == 1)
        {
            uint idx                   = atomicAdd(DenoiseTileDispatchArgs.num_groups_x, 1);
            DenoiseTileData.coord[idx] = current_coord;
        }
        else
        {
            uint idx                = atomicAdd(CopyTileDispatchArgs.num_groups_x, 1);
            CopyTileData.coord[idx] = current_coord;
        }
    }
}

// ------------------------------------------------------------------