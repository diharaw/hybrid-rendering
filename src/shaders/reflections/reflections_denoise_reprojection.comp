#version 450

#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"
#define REPROJECTION_REFLECTIONS
#define REPROJECTION_MOMENTS
#include "../reprojection.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

// Current Reprojection Write DS
layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D i_Output;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D i_Moments;

// Current G-buffer DS
layout(set = 1, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 1, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 1, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 1, binding = 3) uniform sampler2D s_GBufferDepth;

// Previous G-Buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_PrevGBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_PrevGBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_PrevGBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_PrevGBufferDepth;

// Input DS
layout(set = 3, binding = 0) uniform sampler2D s_Input;

// Prev Output
layout(set = 4, binding = 0) uniform sampler2D s_HistoryOutput;
layout(set = 4, binding = 1) uniform sampler2D s_HistoryMoments;

// Per Frame UBO
layout(set = 5, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
}
u_GlobalUBO;

layout(set = 6, binding = 0, std430) buffer DenoiseTileData_t
{
    ivec2 coord[];
}
DenoiseTileData;
layout(set = 6, binding = 1, std430) buffer DenoiseTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
DenoiseTileDispatchArgs;
layout(set = 6, binding = 2, std430) buffer CopyTileData_t
{
    ivec2 coord[];
}
CopyTileData;
layout(set = 6, binding = 3, std430) buffer CopyTileDispatchArgs_t
{
    uint num_groups_x;
    uint num_groups_y;
    uint num_groups_z;
}
CopyTileDispatchArgs;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    vec3  camera_delta;
    float frame_time;
    float alpha;
    float moments_alpha;
    int   g_buffer_mip;
    int   approximate_with_ddgi;
}
u_PushConstants;

shared uint g_should_denoise;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

vec3 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec3 history_sample)
{
    // Note: only clips towards aabb center
    vec3 aabb_center = 0.5f * (aabb_max + aabb_min);
    vec3 extent_clip = 0.5f * (aabb_max - aabb_min) + 0.001f;

    // Find color vector
    vec3 color_vector = history_sample - aabb_center;
    // Transform into clip space
    vec3 color_vector_clip = color_vector / extent_clip;
    // Find max absolute component
    color_vector_clip  = abs(color_vector_clip);
    float max_abs_unit = max(max(color_vector_clip.x, color_vector_clip.y), color_vector_clip.z);

    if (max_abs_unit > 1.0)
        return aabb_center + color_vector / max_abs_unit; // clip towards color vector
    else
        return history_sample; // point is inside aabb
}

// ------------------------------------------------------------------

void neighborhood_standard_deviation(ivec2 coord, out vec3 mean, out vec3 std_dev)
{
    vec3 m1 = vec3(0.0f);
    vec3 m2 = vec3(0.0f);

    int   radius = 8;
    float weight = (float(radius) * 2.0f + 1.0f) * (float(radius) * 2.0f + 1.0f);

    for (int dx = -radius; dx <= radius; dx++)
    {
        for (int dy = -radius; dy <= radius; dy++)
        {
            ivec2 sample_coord = coord + ivec2(dx, dy);
            vec3  sample_color = texelFetch(s_Input, sample_coord, 0).rgb;

            m1 += sample_color;
            m2 += sample_color * sample_color;
        }
    }

    mean          = m1 / weight;
    vec3 variance = (m2 / weight) - (mean * mean);

    std_dev = sqrt(max(variance, 0.0f));
}

// ------------------------------------------------------------------

// TODO: Implement proper accumulation speed adjustment
float compute_max_accumulated_frame(float history_length)
{
    if (length(u_PushConstants.camera_delta) > 0.0f)
        return 8.0f;
    else
        return history_length;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    g_should_denoise = 0;

    barrier();

    const ivec2 size          = textureSize(s_HistoryOutput, 0);
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    const float depth     = texelFetch(s_GBufferDepth, current_coord, u_PushConstants.g_buffer_mip).r;
    const float roughness = texelFetch(s_GBuffer3, current_coord, u_PushConstants.g_buffer_mip).r;

    vec4 output_radiance = vec4(0.0f);
    vec4 output_moments  = vec4(0.0f);

    if (depth != 1.0f)
    {
        vec4        color_ray_length = texelFetch(s_Input, current_coord, 0);
        vec3        color            = color_ray_length.rgb;
        const float ray_length       = color_ray_length.a;

        vec3  history_color;
        vec2  history_moments;
        float history_length;

        bool success = reproject(current_coord,
                                 depth,
                                 u_PushConstants.g_buffer_mip,
                                 u_GlobalUBO.cam_pos.xyz,
                                 u_GlobalUBO.view_proj_inverse,
                                 u_GlobalUBO.prev_view_proj,
                                 ray_length,
                                 s_GBuffer2,
                                 s_GBuffer3,
                                 s_PrevGBuffer2,
                                 s_PrevGBuffer3,
                                 s_PrevGBufferDepth,
                                 s_HistoryOutput,
                                 s_HistoryMoments,
                                 history_color,
                                 history_moments,
                                 history_length);

        history_length = min(32.0f, success ? history_length + 1.0f : 1.0f);

        if (success)
        {
            vec3 std_dev;
            vec3 mean;

            neighborhood_standard_deviation(ivec2(gl_GlobalInvocationID.xy), mean, std_dev);

            vec3 radiance_min = mean - std_dev;
            vec3 radiance_max = mean + std_dev;

            history_color.xyz = clip_aabb(radiance_min, radiance_max, history_color.xyz);
        }

        // this adjusts the alpha for the case where insufficient history is available.
        // It boosts the temporal accumulation to give the samples equal weights in
        // the beginning.

        const float max_accumulated_frame = compute_max_accumulated_frame(history_length);
        const float alpha                 = success ? max(u_PushConstants.alpha, 1.0 / max_accumulated_frame) : 1.0;
        const float alpha_moments         = success ? max(u_PushConstants.moments_alpha, 1.0 / max_accumulated_frame) : 1.0;

        // compute first two moments of luminance
        vec2 moments = vec2(0.0f);
        moments.r    = luminance(color);
        moments.g    = moments.r * moments.r;

        // temporal integration of the moments
        moments = mix(history_moments, moments, alpha_moments);

        float variance = max(0.0f, moments.g - moments.r * moments.r);

        // temporal integration of radiance
        vec3 accumulated_color = mix(history_color, color, alpha);

        output_moments  = vec4(moments, history_length, 0.0f);
        output_radiance = vec4(accumulated_color, variance);
    }

    imageStore(i_Moments, ivec2(gl_GlobalInvocationID.xy), output_moments);
    imageStore(i_Output, ivec2(gl_GlobalInvocationID.xy), output_radiance);

    // If all the threads are in within the roughness range, skip the A-Trous filter.
    if (depth != 1.0f && roughness >= MIRROR_REFLECTIONS_ROUGHNESS_THRESHOLD)
    {
        if (u_PushConstants.approximate_with_ddgi == 1)
        {
            if (roughness <= DDGI_REFLECTIONS_ROUGHNESS_THRESHOLD)
                g_should_denoise = 1;
        }
        else
            g_should_denoise = 1;
    }

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        if (g_should_denoise == 1)
        {
            uint idx                   = atomicAdd(DenoiseTileDispatchArgs.num_groups_x, 1);
            DenoiseTileData.coord[idx] = current_coord;
        }
        else
        {
            uint idx                = atomicAdd(CopyTileDispatchArgs.num_groups_x, 1);
            CopyTileData.coord[idx] = current_coord;
        }
    }
}

// ------------------------------------------------------------------