#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common.glsl"
#define USE_EDGE_STOPPING_NORMAL_WEIGHT
#define USE_EDGE_STOPPING_LUMA_WEIGHT
#include "../edge_stopping.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D i_Output;

layout(set = 1, binding = 0) uniform sampler2D s_Input;

// Current G-buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_GBufferDepth;

layout(set = 3, binding = 0, std430) buffer DenoiseTileData_t
{
    ivec2 coord[];
}
DenoiseTileData;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    int   radius;
    int   step_size;
    float phi_color;
    float phi_normal;
    float sigma_depth;
    int   g_buffer_mip;
    int   approximate_with_ddgi;
}
u_PushConstants;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

// computes a 3x3 gaussian blur of the variance, centered around
// the current pixel
float compute_variance_center(ivec2 ipos)
{
    float sum = 0.0f;

    const float kernel[2][2] = {
        { 1.0 / 4.0, 1.0 / 8.0 },
        { 1.0 / 8.0, 1.0 / 16.0 }
    };

    const int radius = 1;
    for (int yy = -radius; yy <= radius; yy++)
    {
        for (int xx = -radius; xx <= radius; xx++)
        {
            ivec2 p = ipos + ivec2(xx, yy);

            float k = kernel[abs(xx)][abs(yy)];

            sum += texelFetch(s_Input, p, 0).a * k;
        }
    }

    return sum;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    ivec2       size = textureSize(s_GBuffer1, u_PushConstants.g_buffer_mip);
    const ivec2 ipos = DenoiseTileData.coord[gl_WorkGroupID.x] + ivec2(gl_LocalInvocationID.xy);

    const float eps_variance      = 1e-10;
    const float kernel_weights[3] = { 1.0, 2.0 / 3.0, 1.0 / 6.0 };

    // constant samplers to prevent the compiler from generating code which
    // fetches the sampler descriptor from memory for each texture access
    const vec4  color_center      = texelFetch(s_Input, ipos, 0);
    const float center_color_luma = luminance(color_center.rgb);

    // variance for direct and indirect, filtered using 3x3 gaussin blur
    const float var = compute_variance_center(ipos);

    vec4 center_g_buffer_2 = texelFetch(s_GBuffer2, ipos, u_PushConstants.g_buffer_mip);
    vec4 center_g_buffer_3 = texelFetch(s_GBuffer3, ipos, u_PushConstants.g_buffer_mip);

    vec3  current_normal = octohedral_to_direction(center_g_buffer_2.xy);
    float center_depth   = center_g_buffer_3.w;

    const float depth     = texelFetch(s_GBufferDepth, ipos, u_PushConstants.g_buffer_mip).r;
    const float roughness = texelFetch(s_GBuffer3, ipos, u_PushConstants.g_buffer_mip).r;

    if (depth == 1.0f)
    {
        imageStore(i_Output, ipos, vec4(0.0f));
        return;
    }
    else if ((roughness < MIRROR_REFLECTIONS_ROUGHNESS_THRESHOLD) || (u_PushConstants.approximate_with_ddgi == 1 && (roughness > DDGI_REFLECTIONS_ROUGHNESS_THRESHOLD)))
    {
        imageStore(i_Output, ipos, color_center);
        return;
    }

    const float phi_color = u_PushConstants.phi_color * sqrt(max(0.0, eps_variance + var.r));

    // explicitly store/accumulate center pixel with weight 1 to prevent issues
    // with the edge-stopping functions
    float sum_w_color = 1.0;
    vec4  sum_color   = color_center;

    for (int yy = -u_PushConstants.radius; yy <= u_PushConstants.radius; yy++)
    {
        for (int xx = -u_PushConstants.radius; xx <= u_PushConstants.radius; xx++)
        {
            const ivec2 p      = ipos + ivec2(xx, yy) * u_PushConstants.step_size;
            const bool  inside = all(greaterThanEqual(p, ivec2(0, 0))) && all(lessThan(p, size));
            const float kernel = kernel_weights[abs(xx)] * kernel_weights[abs(yy)];

            if (inside && (xx != 0 || yy != 0)) // skip center pixel, it is already accumulated
            {
                const vec4  sample_color      = texelFetch(s_Input, p, 0);
                const float sample_color_luma = luminance(sample_color.rgb);

                vec4 sample_g_buffer_2 = texelFetch(s_GBuffer2, p, u_PushConstants.g_buffer_mip);
                vec4 sample_g_buffer_3 = texelFetch(s_GBuffer3, p, u_PushConstants.g_buffer_mip);

                vec3  sample_normal = octohedral_to_direction(sample_g_buffer_2.xy);
                float sample_depth  = sample_g_buffer_3.w;

                // compute the edge-stopping functions
                const float w = compute_edge_stopping_weight(center_depth,
                                                             sample_depth,
                                                             u_PushConstants.sigma_depth,
                                                             current_normal,
                                                             sample_normal,
                                                             u_PushConstants.phi_normal,
                                                             center_color_luma,
                                                             sample_color_luma,
                                                             phi_color);

                const float w_color = w * kernel;

                // alpha channel contains the variance, therefore the weights need to be squared, see paper for the formula
                sum_w_color += w_color;
                sum_color += vec4(vec3(w_color), w_color * w_color) * sample_color;
            }
        }
    }

    // renormalization is different for variance, check paper for the formula
    vec4 out_color = sum_color / vec4(vec3(sum_w_color), sum_w_color * sum_w_color);

    // temporal integration
    imageStore(i_Output, ipos, out_color);
}

// ------------------------------------------------------------------