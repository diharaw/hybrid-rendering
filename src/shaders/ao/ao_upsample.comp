#version 450

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#define DEPTH_FACTOR 0.5

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, r16f) uniform image2D i_Output;

layout(set = 1, binding = 0) uniform sampler2D s_Input;

// Current G-buffer DS
layout(set = 2, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 2, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 2, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 2, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------
// ------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    int   g_buffer_mip;
    float power;
}
u_PushConstants;

// ------------------------------------------------------------------
// CONSTANTS --------------------------------------------------------
// ------------------------------------------------------------------

const float FLT_EPS = 0.00000001;

const vec2 g_kernel[4] = vec2[](
    vec2(0.0f, 1.0f),
    vec2(1.0f, 0.0f),
    vec2(-1.0f, 0.0f),
    vec2(0.0, -1.0f));

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

float normal_edge_stopping_weight(vec3 hi_res_normal, vec3 coarse_normal)
{
    return pow(abs(dot(coarse_normal, hi_res_normal)), 32);
}

// ------------------------------------------------------------------------

float depth_edge_stopping_weight(float hi_res_depth, float coarse_depth)
{
    float depth_diff = abs(hi_res_depth - coarse_depth);
    float d_factor   = depth_diff * DEPTH_FACTOR;
    return exp(-(d_factor * d_factor));
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    const ivec2 size          = textureSize(s_GBuffer1, 0);
    const vec2  texel_size    = vec2(1.0f) / vec2(textureSize(s_GBuffer1, u_PushConstants.g_buffer_mip));
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float hi_res_depth = texelFetch(s_GBuffer3, current_coord, 0).a;

    if (hi_res_depth == -1.0f)
    {
        imageStore(i_Output, current_coord, vec4(1.0f));
        return;
    }

    vec3 hi_res_normal = octohedral_to_direction(texelFetch(s_GBuffer2, current_coord, 0).rg);

    float upsampled = 0.0f;
    float total_w   = 0.0f;

    for (int i = 0; i < 4; i++)
    {
        vec2  coarse_tex_coord = tex_coord + g_kernel[i] * texel_size;
        float coarse_depth     = textureLod(s_GBuffer3, coarse_tex_coord, u_PushConstants.g_buffer_mip).a;

        // If depth belongs to skybox, skip
        if (coarse_depth == -1.0f)
            continue;

        vec3 coarse_normal = octohedral_to_direction(textureLod(s_GBuffer2, coarse_tex_coord, u_PushConstants.g_buffer_mip).rg);

        float w_depth  = depth_edge_stopping_weight(hi_res_depth, coarse_depth);
        float w_normal = normal_edge_stopping_weight(hi_res_normal, coarse_normal);
        float w        = w_depth * w_normal;

        upsampled += textureLod(s_Input, coarse_tex_coord, 0).r * w;
        total_w += w;
    }

    upsampled = upsampled / max(total_w, FLT_EPS);

    upsampled = pow(upsampled, u_PushConstants.power);

    // Store
    imageStore(i_Output, current_coord, vec4(upsampled));
}

// ------------------------------------------------------------------