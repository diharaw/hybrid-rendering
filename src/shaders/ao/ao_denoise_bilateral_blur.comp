#version 450

#extension GL_GOOGLE_include_directive : require

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#define CACHE_SIZE_X NUM_THREADS_X * 2
#define CACHE_SIZE_Y NUM_THREADS_Y * 2
#define DEPTH_FACTOR 0.5
#define GAUSS_BLUR_DEVIATION 1.5
#define PI 3.14159265359
#define USE_NORMAL_EDGE_STOPPING
#define USE_SHARED_MEMORY_CACHE

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0, r16f) uniform image2D i_Output;

layout(set = 1, binding = 0) uniform sampler2D s_Input;

layout(set = 2, binding = 1) uniform sampler2D s_HistoryLength;

// Current G-buffer DS
layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1; // RGB: Albedo, A: Metallic
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2; // RG: Normal, BA: Motion Vector
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 3, binding = 3) uniform sampler2D s_GBufferDepth;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------

layout(push_constant) uniform PushConstants
{
    vec4  z_buffer_params;
    ivec2 direction;
    int   radius;
    int   g_buffer_mip;
}
u_PushConstants;

// ------------------------------------------------------------------
// SHARED MEMORY ----------------------------------------------------
// ------------------------------------------------------------------

#if defined(USE_SHARED_MEMORY_CACHE)
shared float g_cached_depth[CACHE_SIZE_X][CACHE_SIZE_Y];
shared uint  g_cached_normal_xy[CACHE_SIZE_X][CACHE_SIZE_Y];
shared uint  g_cached_normal_z_ao[CACHE_SIZE_X][CACHE_SIZE_Y];
#endif

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

float linear_eye_depth(float z)
{
    return 1.0 / (u_PushConstants.z_buffer_params.z * z + u_PushConstants.z_buffer_params.w);
}

// ------------------------------------------------------------------------

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0.0)
        v.xy = (1.0 - abs(v.yx)) * (step(0.0, v.xy) * 2.0 - vec2(1.0));
    return normalize(v);
}

// ------------------------------------------------------------------------

#if defined(USE_SHARED_MEMORY_CACHE)
void populate_cache()
{
    const ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(NUM_THREADS_X/2, NUM_THREADS_Y/2);
    const ivec2 coord = min_cached_coord + ivec2(gl_LocalInvocationID.xy);

    const ivec2 offsets[4] = { ivec2(0, 0), ivec2(0, 8), ivec2(8, 0), ivec2(8, 8) };

    for (int i = 0; i < 4; i++)
    {
        const ivec2 cache_coord = ivec2(gl_LocalInvocationID.xy) + offsets[i];

        const float ao     = texelFetch(s_Input, coord + offsets[i], 0).r;
        const vec3  normal = octohedral_to_direction(texelFetch(s_GBuffer2, coord + offsets[i], u_PushConstants.g_buffer_mip).rg);
        const float depth  = texelFetch(s_GBufferDepth, coord + offsets[i], u_PushConstants.g_buffer_mip).r;

        g_cached_depth[cache_coord.x][cache_coord.y] = depth;
        g_cached_normal_xy[cache_coord.x][cache_coord.y]   = packSnorm2x16(normal.xy);
        g_cached_normal_z_ao[cache_coord.x][cache_coord.y] = packSnorm2x16(vec2(normal.z, ao));
    }

    barrier();
}
#endif

// ------------------------------------------------------------------

void load_ao_and_normal(ivec2 coord, out float ao, out vec3 normal)
{
#if defined(USE_SHARED_MEMORY_CACHE)
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(NUM_THREADS_X/2, NUM_THREADS_Y/2);
    
    ivec2 cache_coord = coord - min_cached_coord;

    uint packed_normal_xy   = g_cached_normal_xy[cache_coord.x][cache_coord.y];
    uint packed_normal_z_ao = g_cached_normal_z_ao[cache_coord.x][cache_coord.y];

    vec2 unpacked_normal_xy   = unpackSnorm2x16(packed_normal_xy);
    vec2 unpacked_normal_z_ao = unpackSnorm2x16(packed_normal_z_ao);

    ao     =  unpacked_normal_z_ao.y;
    normal = vec3(unpacked_normal_xy, unpacked_normal_z_ao.x);
#else
    ao     = texelFetch(s_Input, coord, 0).r;
    normal = octohedral_to_direction(texelFetch(s_GBuffer2, coord, u_PushConstants.g_buffer_mip).rg);
#endif
}

// ------------------------------------------------------------------

float load_depth(ivec2 coord)
{
#if defined(USE_SHARED_MEMORY_CACHE)
    ivec2 min_cached_coord = ivec2(gl_WorkGroupID.xy) * ivec2(NUM_THREADS_X, NUM_THREADS_Y) - ivec2(NUM_THREADS_X/2, NUM_THREADS_Y/2);
    
    ivec2 cache_coord = coord - min_cached_coord;
    
    return g_cached_depth[cache_coord.x][cache_coord.y];
#else 
    return texelFetch(s_GBufferDepth, coord, u_PushConstants.g_buffer_mip).r;
#endif
}

// ------------------------------------------------------------------

float gaussian_weight(float offset, float deviation)
{
    float weight = 1.0 / sqrt(2.0 * PI * deviation * deviation);
    weight *= exp(-(offset * offset) / (2.0 * deviation * deviation));
    return weight;
}

// ------------------------------------------------------------------------

float normal_edge_stopping_weight(vec3 center_normal, vec3 sample_normal)
{
    return pow(abs(dot(center_normal, sample_normal)), 32);
}

// ------------------------------------------------------------------------

float depth_edge_stopping_weight(float center_lin_depth, float sample_lin_depth)
{
    float depth_diff = abs(center_lin_depth - sample_lin_depth);
    float d_factor   = depth_diff * DEPTH_FACTOR;
    return exp(-(d_factor * d_factor));
}

// ------------------------------------------------------------------

float bilateral_blur(ivec2 current_coord)
{
    const float deviation = float(u_PushConstants.radius) / GAUSS_BLUR_DEVIATION;

    vec3  center_normal;
    float total_ao     = 0.0f;
    float total_weight = 1.0f;

    float center_depth = linear_eye_depth(load_depth(current_coord));
    load_ao_and_normal(current_coord, total_ao, center_normal);

    int radius = u_PushConstants.radius;

    for (int i = -radius; i <= radius; i++)
    {
        if (i == 0)
            continue;

        ivec2 sample_coord = current_coord + u_PushConstants.direction * ivec2(i);
        float sample_depth = linear_eye_depth(load_depth(sample_coord));
        float sample_ao;
        vec3  sample_normal;

        load_ao_and_normal(sample_coord, sample_ao, sample_normal);

        float weight = gaussian_weight(float(i), deviation);
        weight *= depth_edge_stopping_weight(center_depth, sample_depth);
        weight *= normal_edge_stopping_weight(center_normal, sample_normal);

        total_ao += weight * sample_ao;
        total_weight += weight;
    }

    return total_ao / max(total_weight, 0.0001f);
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    // Query the G-Buffer image size
    ivec2 size = textureSize(s_GBuffer1, u_PushConstants.g_buffer_mip);

    // Compute current pixel coord
    ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);

#if defined(USE_SHARED_MEMORY_CACHE)
    // Populate LDS cache
    populate_cache();
#endif

    // Skip pixel if it belongs to the background
    float depth = load_depth(current_coord);

    if (depth == 1.0f)
    {
        imageStore(i_Output, current_coord, vec4(0.0f));
        return;
    }

    // Blur
    float ao = bilateral_blur(current_coord);

    // Store blurred ao
    imageStore(i_Output, current_coord, vec4(ao));
}

// ------------------------------------------------------------------